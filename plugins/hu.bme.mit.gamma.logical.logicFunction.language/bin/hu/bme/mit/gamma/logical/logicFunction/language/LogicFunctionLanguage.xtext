// automatically generated by Xtext
grammar hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage with hu.bme.mit.gamma.logical.logicBase.language.LogicBaseLanguage

import "http://www.mit.bme.hu/gamma/logical/logicFunction/Model" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.mit.bme.hu/gamma/logical/logicBase/Model" as logicBaseModel

LogicFunctionDiagram returns LogicFunctionDiagram:
	'function'
	name=ID
	'{'
		(rule+=RuleDeclaration | interfaces += Interface)*
	'}'
;

RuleDeclaration returns Rule:
	'rule' (name=ID)? ':='
		(
			raises=[logicBaseModel::Event|QualifiedName] '<-'
		)? 
		(
			expression = AND |
			expression = OR |
			expression = XOR |
			expression = NOT |
			expression = PredicateListen |
			expression = RuleListen
		)
;

AND returns AND:
	'and' '(' (
			arguments += AND |
			arguments += OR |
			arguments += XOR |
			arguments += NOT |
			arguments += PredicateListen |
			arguments += RuleListen
		) (','
			(
				arguments += AND |
				arguments += OR |
				arguments += XOR |
				arguments += NOT |
				arguments += PredicateListen |
				arguments += RuleListen
			)
		)* ')'
;


OR returns OR:
	'or' '(' (
			arguments += AND |
			arguments += OR |
			arguments += XOR |
			arguments += NOT |
			arguments += PredicateListen |
			arguments += RuleListen
		) (','
			(
				arguments += AND |
				arguments += OR |
				arguments += XOR |
				arguments += NOT |
				arguments += PredicateListen |
				arguments += RuleListen
			)
		)* ')'
;

XOR returns XOR:
	'xor' '('  (
			arguments += AND |
			arguments += OR |
			arguments += XOR |
			arguments += NOT |
			arguments += PredicateListen |
			arguments += RuleListen
		) (','
			(
				arguments += AND |
				arguments += OR |
				arguments += XOR |
				arguments += NOT |
				arguments += PredicateListen |
				arguments += RuleListen
			)
		)* ')'
;


NOT returns NOT:
	'not' '(' (
		argument = AND |
		argument = OR |
		argument = XOR |
		argument = NOT |
		argument = PredicateListen |
		argument = RuleListen
		) ')'
;

PredicateListen returns PredicateListen:
	listens=Predicate
;

RuleListen returns RuleListen:
	listens = [Rule]
;
