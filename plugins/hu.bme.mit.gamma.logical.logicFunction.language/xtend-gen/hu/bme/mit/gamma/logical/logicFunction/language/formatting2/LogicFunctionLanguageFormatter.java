/**
 * generated by Xtext 2.17.0
 */
package hu.bme.mit.gamma.logical.logicFunction.language.formatting2;

import com.google.inject.Inject;
import hu.bme.mit.gamma.logical.logicBase.language.formatting2.LogicBaseLanguageFormatter;
import hu.bme.mit.gamma.logical.logicBase.model.LogicInterfaceSpecification;
import hu.bme.mit.gamma.logical.logicFunction.language.services.LogicFunctionLanguageGrammarAccess;
import hu.bme.mit.gamma.logical.logicFunction.model.Expression;
import hu.bme.mit.gamma.logical.logicFunction.model.LogicFunctionDiagram;
import hu.bme.mit.gamma.logical.logicFunction.model.Rule;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class LogicFunctionLanguageFormatter extends LogicBaseLanguageFormatter {
  @Inject
  @Extension
  private LogicFunctionLanguageGrammarAccess _logicFunctionLanguageGrammarAccess;
  
  protected void _format(final LogicFunctionDiagram logicFunctionDiagram, @Extension final IFormattableDocument document) {
    EList<Rule> _rule = logicFunctionDiagram.getRule();
    for (final Rule rule : _rule) {
      document.<Rule>format(rule);
    }
    EList<LogicInterfaceSpecification> _interfaces = logicFunctionDiagram.getInterfaces();
    for (final LogicInterfaceSpecification logicInterfaceSpecification : _interfaces) {
      document.<LogicInterfaceSpecification>format(logicInterfaceSpecification);
    }
  }
  
  protected void _format(final Rule rule, @Extension final IFormattableDocument document) {
    document.<Expression>format(rule.getExpression());
  }
  
  public void format(final Object logicFunctionDiagram, final IFormattableDocument document) {
    if (logicFunctionDiagram instanceof LogicFunctionDiagram) {
      _format((LogicFunctionDiagram)logicFunctionDiagram, document);
      return;
    } else if (logicFunctionDiagram instanceof XtextResource) {
      _format((XtextResource)logicFunctionDiagram, document);
      return;
    } else if (logicFunctionDiagram instanceof LogicInterfaceSpecification) {
      _format((LogicInterfaceSpecification)logicFunctionDiagram, document);
      return;
    } else if (logicFunctionDiagram instanceof Rule) {
      _format((Rule)logicFunctionDiagram, document);
      return;
    } else if (logicFunctionDiagram instanceof EObject) {
      _format((EObject)logicFunctionDiagram, document);
      return;
    } else if (logicFunctionDiagram == null) {
      _format((Void)null, document);
      return;
    } else if (logicFunctionDiagram != null) {
      _format(logicFunctionDiagram, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(logicFunctionDiagram, document).toString());
    }
  }
}
