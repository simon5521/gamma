/*
 * generated by Xtext 2.17.0
 */
package hu.bme.mit.gamma.logical.logicFunction.language.serializer;

import com.google.inject.Inject;
import hu.bme.mit.gamma.logical.logicBase.language.serializer.LogicBaseLanguageSemanticSequencer;
import hu.bme.mit.gamma.logical.logicBase.model.Event;
import hu.bme.mit.gamma.logical.logicBase.model.LogicInterfaceSpecification;
import hu.bme.mit.gamma.logical.logicBase.model.Predicate;
import hu.bme.mit.gamma.logical.logicFunction.language.services.LogicFunctionLanguageGrammarAccess;
import hu.bme.mit.gamma.logical.logicFunction.model.AND;
import hu.bme.mit.gamma.logical.logicFunction.model.LogicFunctionDiagram;
import hu.bme.mit.gamma.logical.logicFunction.model.ModelPackage;
import hu.bme.mit.gamma.logical.logicFunction.model.NOT;
import hu.bme.mit.gamma.logical.logicFunction.model.OR;
import hu.bme.mit.gamma.logical.logicFunction.model.PredicateListen;
import hu.bme.mit.gamma.logical.logicFunction.model.Rule;
import hu.bme.mit.gamma.logical.logicFunction.model.RuleListen;
import hu.bme.mit.gamma.logical.logicFunction.model.XOR;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class LogicFunctionLanguageSemanticSequencer extends LogicBaseLanguageSemanticSequencer {

	@Inject
	private LogicFunctionLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ModelPackage.AND:
				sequence_AND(context, (AND) semanticObject); 
				return; 
			case ModelPackage.LOGIC_FUNCTION_DIAGRAM:
				sequence_LogicFunctionDiagram(context, (LogicFunctionDiagram) semanticObject); 
				return; 
			case ModelPackage.NOT:
				sequence_NOT(context, (NOT) semanticObject); 
				return; 
			case ModelPackage.OR:
				sequence_OR(context, (OR) semanticObject); 
				return; 
			case ModelPackage.PREDICATE_LISTEN:
				sequence_PredicateListen(context, (PredicateListen) semanticObject); 
				return; 
			case ModelPackage.RULE:
				sequence_RuleDeclaration(context, (Rule) semanticObject); 
				return; 
			case ModelPackage.RULE_LISTEN:
				sequence_RuleListen(context, (RuleListen) semanticObject); 
				return; 
			case ModelPackage.XOR:
				sequence_XOR(context, (XOR) semanticObject); 
				return; 
			}
		else if (epackage == hu.bme.mit.gamma.logical.logicBase.model.ModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case hu.bme.mit.gamma.logical.logicBase.model.ModelPackage.EVENT:
				sequence_EventDeclaration(context, (Event) semanticObject); 
				return; 
			case hu.bme.mit.gamma.logical.logicBase.model.ModelPackage.LOGIC_INTERFACE_SPECIFICATION:
				sequence_Interface(context, (LogicInterfaceSpecification) semanticObject); 
				return; 
			case hu.bme.mit.gamma.logical.logicBase.model.ModelPackage.PREDICATE:
				sequence_Predicate(context, (Predicate) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AND returns AND
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             arguments+=AND | 
	 *             arguments+=OR | 
	 *             arguments+=XOR | 
	 *             arguments+=NOT | 
	 *             arguments+=PredicateListen | 
	 *             arguments+=RuleListen
	 *         ) 
	 *         arguments+=AND? 
	 *         ((arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen | arguments+=RuleListen)? arguments+=AND?)*
	 *     )
	 */
	protected void sequence_AND(ISerializationContext context, AND semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LogicFunctionDiagram returns LogicFunctionDiagram
	 *
	 * Constraint:
	 *     (name=ID (rule+=RuleDeclaration | interfaces+=Interface)*)
	 */
	protected void sequence_LogicFunctionDiagram(ISerializationContext context, LogicFunctionDiagram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NOT returns NOT
	 *
	 * Constraint:
	 *     (
	 *         argument=AND | 
	 *         argument=OR | 
	 *         argument=XOR | 
	 *         argument=NOT | 
	 *         argument=PredicateListen | 
	 *         argument=RuleListen
	 *     )
	 */
	protected void sequence_NOT(ISerializationContext context, NOT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OR returns OR
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             arguments+=AND | 
	 *             arguments+=OR | 
	 *             arguments+=XOR | 
	 *             arguments+=NOT | 
	 *             arguments+=PredicateListen | 
	 *             arguments+=RuleListen
	 *         ) 
	 *         arguments+=AND? 
	 *         ((arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen | arguments+=RuleListen)? arguments+=AND?)*
	 *     )
	 */
	protected void sequence_OR(ISerializationContext context, OR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PredicateListen returns PredicateListen
	 *
	 * Constraint:
	 *     listens=Predicate
	 */
	protected void sequence_PredicateListen(ISerializationContext context, PredicateListen semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.PREDICATE_LISTEN__LISTENS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.PREDICATE_LISTEN__LISTENS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPredicateListenAccess().getListensPredicateParserRuleCall_0(), semanticObject.getListens());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RuleDeclaration returns Rule
	 *
	 * Constraint:
	 *     (
	 *         name=ID? 
	 *         raises=[Event|QualifiedName]? 
	 *         (
	 *             expression=AND | 
	 *             expression=OR | 
	 *             expression=XOR | 
	 *             expression=NOT | 
	 *             expression=PredicateListen | 
	 *             expression=RuleListen
	 *         )
	 *     )
	 */
	protected void sequence_RuleDeclaration(ISerializationContext context, Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RuleListen returns RuleListen
	 *
	 * Constraint:
	 *     listens=[Rule|ID]
	 */
	protected void sequence_RuleListen(ISerializationContext context, RuleListen semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.RULE_LISTEN__LISTENS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.RULE_LISTEN__LISTENS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRuleListenAccess().getListensRuleIDTerminalRuleCall_0_1(), semanticObject.eGet(ModelPackage.Literals.RULE_LISTEN__LISTENS, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XOR returns XOR
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             arguments+=AND | 
	 *             arguments+=OR | 
	 *             arguments+=XOR | 
	 *             arguments+=NOT | 
	 *             arguments+=PredicateListen | 
	 *             arguments+=RuleListen
	 *         ) 
	 *         arguments+=AND? 
	 *         ((arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen | arguments+=RuleListen)? arguments+=AND?)*
	 *     )
	 */
	protected void sequence_XOR(ISerializationContext context, XOR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
