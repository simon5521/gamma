/*
 * generated by Xtext 2.17.0
 */
grammar InternalLogicFunctionLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package hu.bme.mit.gamma.logical.logicFunction.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package hu.bme.mit.gamma.logical.logicFunction.language.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import hu.bme.mit.gamma.logical.logicFunction.language.services.LogicFunctionLanguageGrammarAccess;

}

@parser::members {

 	private LogicFunctionLanguageGrammarAccess grammarAccess;

    public InternalLogicFunctionLanguageParser(TokenStream input, LogicFunctionLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "LogicFunctionDiagram";
   	}

   	@Override
   	protected LogicFunctionLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleLogicFunctionDiagram
entryRuleLogicFunctionDiagram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicFunctionDiagramRule()); }
	iv_ruleLogicFunctionDiagram=ruleLogicFunctionDiagram
	{ $current=$iv_ruleLogicFunctionDiagram.current; }
	EOF;

// Rule LogicFunctionDiagram
ruleLogicFunctionDiagram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='function'
		{
			newLeafNode(otherlv_0, grammarAccess.getLogicFunctionDiagramAccess().getFunctionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getLogicFunctionDiagramAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLogicFunctionDiagramRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getLogicFunctionDiagramAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicFunctionDiagramAccess().getRuleRuleDeclarationParserRuleCall_3_0_0());
					}
					lv_rule_3_0=ruleRuleDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicFunctionDiagramRule());
						}
						add(
							$current,
							"rule",
							lv_rule_3_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.RuleDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicFunctionDiagramAccess().getInterfacesInterfaceParserRuleCall_3_1_0());
					}
					lv_interfaces_4_0=ruleInterface
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicFunctionDiagramRule());
						}
						add(
							$current,
							"interfaces",
							lv_interfaces_4_0,
							"hu.bme.mit.gamma.logical.logicBase.language.LogicBaseLanguage.Interface");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getLogicFunctionDiagramAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleRuleDeclaration
entryRuleRuleDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleDeclarationRule()); }
	iv_ruleRuleDeclaration=ruleRuleDeclaration
	{ $current=$iv_ruleRuleDeclaration.current; }
	EOF;

// Rule RuleDeclaration
ruleRuleDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rule'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleDeclarationAccess().getRuleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRuleDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_2=':='
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleDeclarationAccess().getColonEqualsSignKeyword_2());
		}
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRuleDeclarationRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getRuleDeclarationAccess().getRaisesEventCrossReference_3_0_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4='<-'
			{
				newLeafNode(otherlv_4, grammarAccess.getRuleDeclarationAccess().getLessThanSignHyphenMinusKeyword_3_1());
			}
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleDeclarationAccess().getExpressionANDParserRuleCall_4_0_0());
					}
					lv_expression_5_0=ruleAND
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
						}
						set(
							$current,
							"expression",
							lv_expression_5_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.AND");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleDeclarationAccess().getExpressionORParserRuleCall_4_1_0());
					}
					lv_expression_6_0=ruleOR
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
						}
						set(
							$current,
							"expression",
							lv_expression_6_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.OR");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleDeclarationAccess().getExpressionXORParserRuleCall_4_2_0());
					}
					lv_expression_7_0=ruleXOR
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
						}
						set(
							$current,
							"expression",
							lv_expression_7_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.XOR");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleDeclarationAccess().getExpressionNOTParserRuleCall_4_3_0());
					}
					lv_expression_8_0=ruleNOT
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
						}
						set(
							$current,
							"expression",
							lv_expression_8_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.NOT");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleDeclarationAccess().getExpressionPredicateListenParserRuleCall_4_4_0());
					}
					lv_expression_9_0=rulePredicateListen
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
						}
						set(
							$current,
							"expression",
							lv_expression_9_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.PredicateListen");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleDeclarationAccess().getExpressionRuleListenParserRuleCall_4_5_0());
					}
					lv_expression_10_0=ruleRuleListen
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
						}
						set(
							$current,
							"expression",
							lv_expression_10_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.RuleListen");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAND
entryRuleAND returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getANDRule()); }
	iv_ruleAND=ruleAND
	{ $current=$iv_ruleAND.current; }
	EOF;

// Rule AND
ruleAND returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='and'
		{
			newLeafNode(otherlv_0, grammarAccess.getANDAccess().getAndKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getANDAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getANDAccess().getArgumentsANDParserRuleCall_2_0_0());
					}
					lv_arguments_2_0=ruleAND
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getANDRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_2_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.AND");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getANDAccess().getArgumentsORParserRuleCall_2_1_0());
					}
					lv_arguments_3_0=ruleOR
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getANDRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_3_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.OR");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getANDAccess().getArgumentsXORParserRuleCall_2_2_0());
					}
					lv_arguments_4_0=ruleXOR
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getANDRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_4_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.XOR");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getANDAccess().getArgumentsNOTParserRuleCall_2_3_0());
					}
					lv_arguments_5_0=ruleNOT
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getANDRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_5_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.NOT");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getANDAccess().getArgumentsPredicateListenParserRuleCall_2_4_0());
					}
					lv_arguments_6_0=rulePredicateListen
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getANDRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_6_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.PredicateListen");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getANDAccess().getArgumentsRuleListenParserRuleCall_2_5_0());
					}
					lv_arguments_7_0=ruleRuleListen
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getANDRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_7_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.RuleListen");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_8=','
			{
				newLeafNode(otherlv_8, grammarAccess.getANDAccess().getCommaKeyword_3_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getANDAccess().getArgumentsANDParserRuleCall_3_1_0_0());
						}
						lv_arguments_9_0=ruleAND
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getANDRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_9_0,
								"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.AND");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getANDAccess().getArgumentsORParserRuleCall_3_1_1_0());
						}
						lv_arguments_10_0=ruleOR
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getANDRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_10_0,
								"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.OR");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getANDAccess().getArgumentsXORParserRuleCall_3_1_2_0());
						}
						lv_arguments_11_0=ruleXOR
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getANDRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_11_0,
								"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.XOR");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getANDAccess().getArgumentsNOTParserRuleCall_3_1_3_0());
						}
						lv_arguments_12_0=ruleNOT
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getANDRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_12_0,
								"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.NOT");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getANDAccess().getArgumentsPredicateListenParserRuleCall_3_1_4_0());
						}
						lv_arguments_13_0=rulePredicateListen
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getANDRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_13_0,
								"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.PredicateListen");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getANDAccess().getArgumentsRuleListenParserRuleCall_3_1_5_0());
						}
						lv_arguments_14_0=ruleRuleListen
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getANDRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_14_0,
								"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.RuleListen");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
		otherlv_15=')'
		{
			newLeafNode(otherlv_15, grammarAccess.getANDAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleOR
entryRuleOR returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getORRule()); }
	iv_ruleOR=ruleOR
	{ $current=$iv_ruleOR.current; }
	EOF;

// Rule OR
ruleOR returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='or'
		{
			newLeafNode(otherlv_0, grammarAccess.getORAccess().getOrKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getORAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getORAccess().getArgumentsANDParserRuleCall_2_0_0());
					}
					lv_arguments_2_0=ruleAND
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getORRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_2_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.AND");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getORAccess().getArgumentsORParserRuleCall_2_1_0());
					}
					lv_arguments_3_0=ruleOR
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getORRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_3_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.OR");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getORAccess().getArgumentsXORParserRuleCall_2_2_0());
					}
					lv_arguments_4_0=ruleXOR
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getORRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_4_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.XOR");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getORAccess().getArgumentsNOTParserRuleCall_2_3_0());
					}
					lv_arguments_5_0=ruleNOT
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getORRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_5_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.NOT");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getORAccess().getArgumentsPredicateListenParserRuleCall_2_4_0());
					}
					lv_arguments_6_0=rulePredicateListen
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getORRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_6_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.PredicateListen");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getORAccess().getArgumentsRuleListenParserRuleCall_2_5_0());
					}
					lv_arguments_7_0=ruleRuleListen
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getORRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_7_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.RuleListen");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_8=','
			{
				newLeafNode(otherlv_8, grammarAccess.getORAccess().getCommaKeyword_3_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getORAccess().getArgumentsANDParserRuleCall_3_1_0_0());
						}
						lv_arguments_9_0=ruleAND
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getORRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_9_0,
								"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.AND");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getORAccess().getArgumentsORParserRuleCall_3_1_1_0());
						}
						lv_arguments_10_0=ruleOR
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getORRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_10_0,
								"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.OR");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getORAccess().getArgumentsXORParserRuleCall_3_1_2_0());
						}
						lv_arguments_11_0=ruleXOR
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getORRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_11_0,
								"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.XOR");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getORAccess().getArgumentsNOTParserRuleCall_3_1_3_0());
						}
						lv_arguments_12_0=ruleNOT
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getORRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_12_0,
								"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.NOT");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getORAccess().getArgumentsPredicateListenParserRuleCall_3_1_4_0());
						}
						lv_arguments_13_0=rulePredicateListen
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getORRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_13_0,
								"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.PredicateListen");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getORAccess().getArgumentsRuleListenParserRuleCall_3_1_5_0());
						}
						lv_arguments_14_0=ruleRuleListen
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getORRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_14_0,
								"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.RuleListen");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
		otherlv_15=')'
		{
			newLeafNode(otherlv_15, grammarAccess.getORAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleXOR
entryRuleXOR returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXORRule()); }
	iv_ruleXOR=ruleXOR
	{ $current=$iv_ruleXOR.current; }
	EOF;

// Rule XOR
ruleXOR returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='xor'
		{
			newLeafNode(otherlv_0, grammarAccess.getXORAccess().getXorKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getXORAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getXORAccess().getArgumentsANDParserRuleCall_2_0_0());
					}
					lv_arguments_2_0=ruleAND
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXORRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_2_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.AND");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getXORAccess().getArgumentsORParserRuleCall_2_1_0());
					}
					lv_arguments_3_0=ruleOR
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXORRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_3_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.OR");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getXORAccess().getArgumentsXORParserRuleCall_2_2_0());
					}
					lv_arguments_4_0=ruleXOR
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXORRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_4_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.XOR");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getXORAccess().getArgumentsNOTParserRuleCall_2_3_0());
					}
					lv_arguments_5_0=ruleNOT
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXORRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_5_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.NOT");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getXORAccess().getArgumentsPredicateListenParserRuleCall_2_4_0());
					}
					lv_arguments_6_0=rulePredicateListen
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXORRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_6_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.PredicateListen");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getXORAccess().getArgumentsRuleListenParserRuleCall_2_5_0());
					}
					lv_arguments_7_0=ruleRuleListen
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXORRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_7_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.RuleListen");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_8=','
			{
				newLeafNode(otherlv_8, grammarAccess.getXORAccess().getCommaKeyword_3_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getXORAccess().getArgumentsANDParserRuleCall_3_1_0_0());
						}
						lv_arguments_9_0=ruleAND
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getXORRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_9_0,
								"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.AND");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getXORAccess().getArgumentsORParserRuleCall_3_1_1_0());
						}
						lv_arguments_10_0=ruleOR
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getXORRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_10_0,
								"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.OR");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getXORAccess().getArgumentsXORParserRuleCall_3_1_2_0());
						}
						lv_arguments_11_0=ruleXOR
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getXORRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_11_0,
								"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.XOR");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getXORAccess().getArgumentsNOTParserRuleCall_3_1_3_0());
						}
						lv_arguments_12_0=ruleNOT
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getXORRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_12_0,
								"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.NOT");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getXORAccess().getArgumentsPredicateListenParserRuleCall_3_1_4_0());
						}
						lv_arguments_13_0=rulePredicateListen
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getXORRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_13_0,
								"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.PredicateListen");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getXORAccess().getArgumentsRuleListenParserRuleCall_3_1_5_0());
						}
						lv_arguments_14_0=ruleRuleListen
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getXORRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_14_0,
								"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.RuleListen");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
		otherlv_15=')'
		{
			newLeafNode(otherlv_15, grammarAccess.getXORAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleNOT
entryRuleNOT returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNOTRule()); }
	iv_ruleNOT=ruleNOT
	{ $current=$iv_ruleNOT.current; }
	EOF;

// Rule NOT
ruleNOT returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='not'
		{
			newLeafNode(otherlv_0, grammarAccess.getNOTAccess().getNotKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getNOTAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getNOTAccess().getArgumentANDParserRuleCall_2_0_0());
					}
					lv_argument_2_0=ruleAND
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNOTRule());
						}
						set(
							$current,
							"argument",
							lv_argument_2_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.AND");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getNOTAccess().getArgumentORParserRuleCall_2_1_0());
					}
					lv_argument_3_0=ruleOR
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNOTRule());
						}
						set(
							$current,
							"argument",
							lv_argument_3_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.OR");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getNOTAccess().getArgumentXORParserRuleCall_2_2_0());
					}
					lv_argument_4_0=ruleXOR
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNOTRule());
						}
						set(
							$current,
							"argument",
							lv_argument_4_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.XOR");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getNOTAccess().getArgumentNOTParserRuleCall_2_3_0());
					}
					lv_argument_5_0=ruleNOT
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNOTRule());
						}
						set(
							$current,
							"argument",
							lv_argument_5_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.NOT");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getNOTAccess().getArgumentPredicateListenParserRuleCall_2_4_0());
					}
					lv_argument_6_0=rulePredicateListen
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNOTRule());
						}
						set(
							$current,
							"argument",
							lv_argument_6_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.PredicateListen");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getNOTAccess().getArgumentRuleListenParserRuleCall_2_5_0());
					}
					lv_argument_7_0=ruleRuleListen
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNOTRule());
						}
						set(
							$current,
							"argument",
							lv_argument_7_0,
							"hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.RuleListen");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getNOTAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulePredicateListen
entryRulePredicateListen returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredicateListenRule()); }
	iv_rulePredicateListen=rulePredicateListen
	{ $current=$iv_rulePredicateListen.current; }
	EOF;

// Rule PredicateListen
rulePredicateListen returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPredicateListenAccess().getListensPredicateParserRuleCall_0());
			}
			lv_listens_0_0=rulePredicate
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getPredicateListenRule());
				}
				set(
					$current,
					"listens",
					lv_listens_0_0,
					"hu.bme.mit.gamma.logical.logicBase.language.LogicBaseLanguage.Predicate");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleRuleListen
entryRuleRuleListen returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleListenRule()); }
	iv_ruleRuleListen=ruleRuleListen
	{ $current=$iv_ruleRuleListen.current; }
	EOF;

// Rule RuleListen
ruleRuleListen returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getRuleListenRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getRuleListenAccess().getListensRuleCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleInterface
entryRuleInterface returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInterfaceRule()); }
	iv_ruleInterface=ruleInterface
	{ $current=$iv_ruleInterface.current; }
	EOF;

// Rule Interface
ruleInterface returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='interface'
		{
			newLeafNode(otherlv_0, grammarAccess.getInterfaceAccess().getInterfaceKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInterfaceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getInterfaceAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInterfaceAccess().getEventsEventDeclarationParserRuleCall_3_0());
				}
				lv_events_3_0=ruleEventDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInterfaceRule());
					}
					add(
						$current,
						"events",
						lv_events_3_0,
						"hu.bme.mit.gamma.logical.logicBase.language.LogicBaseLanguage.EventDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getInterfaceAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleEventDeclaration
entryRuleEventDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventDeclarationRule()); }
	iv_ruleEventDeclaration=ruleEventDeclaration
	{ $current=$iv_ruleEventDeclaration.current; }
	EOF;

// Rule EventDeclaration
ruleEventDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEventDeclarationAccess().getDirectionEventDirectionEnumRuleCall_0_0());
				}
				lv_direction_0_0=ruleEventDirection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventDeclarationRule());
					}
					set(
						$current,
						"direction",
						lv_direction_0_0,
						"hu.bme.mit.gamma.logical.logicBase.language.LogicBaseLanguage.EventDirection");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEventDeclarationAccess().getExtraValueTypeValueTypeEnumRuleCall_1_0());
				}
				lv_extraValueType_1_0=ruleValueType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventDeclarationRule());
					}
					set(
						$current,
						"extraValueType",
						lv_extraValueType_1_0,
						"hu.bme.mit.gamma.logical.logicBase.language.LogicBaseLanguage.ValueType");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getEventDeclarationAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRulePredicate
entryRulePredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	iv_rulePredicate=rulePredicate
	{ $current=$iv_rulePredicate.current; }
	EOF;

// Rule Predicate
rulePredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='income'
		{
			newLeafNode(otherlv_0, grammarAccess.getPredicateAccess().getIncomeKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPredicateRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getPredicateAccess().getListensEventCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Rule EventDirection
ruleEventDirection returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='in'
			{
				$current = grammarAccess.getEventDirectionAccess().getINEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEventDirectionAccess().getINEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='out'
			{
				$current = grammarAccess.getEventDirectionAccess().getOUTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEventDirectionAccess().getOUTEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule ValueType
ruleValueType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='int'
		{
			$current = grammarAccess.getValueTypeAccess().getINTEGEREnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getValueTypeAccess().getINTEGEREnumLiteralDeclaration());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
