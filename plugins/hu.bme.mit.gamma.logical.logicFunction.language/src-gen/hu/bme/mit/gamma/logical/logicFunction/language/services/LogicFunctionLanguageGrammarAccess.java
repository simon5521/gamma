/*
 * generated by Xtext 2.17.0
 */
package hu.bme.mit.gamma.logical.logicFunction.language.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import hu.bme.mit.gamma.logical.logicBase.language.services.LogicBaseLanguageGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LogicFunctionLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class LogicFunctionDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.LogicFunctionDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cRuleAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cRuleRuleDeclarationParserRuleCall_3_0_0 = (RuleCall)cRuleAssignment_3_0.eContents().get(0);
		private final Assignment cInterfacesAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cInterfacesInterfaceParserRuleCall_3_1_0 = (RuleCall)cInterfacesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LogicFunctionDiagram:
		//	'function'
		//	name=ID
		//	'{' (rule+=RuleDeclaration | interfaces+=Interface)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=ID '{' (rule+=RuleDeclaration | interfaces+=Interface)* '}'
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(rule+=RuleDeclaration | interfaces+=Interface)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//rule+=RuleDeclaration
		public Assignment getRuleAssignment_3_0() { return cRuleAssignment_3_0; }
		
		//RuleDeclaration
		public RuleCall getRuleRuleDeclarationParserRuleCall_3_0_0() { return cRuleRuleDeclarationParserRuleCall_3_0_0; }
		
		//interfaces+=Interface
		public Assignment getInterfacesAssignment_3_1() { return cInterfacesAssignment_3_1; }
		
		//Interface
		public RuleCall getInterfacesInterfaceParserRuleCall_3_1_0() { return cInterfacesInterfaceParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RuleDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.RuleDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cRaisesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cRaisesEventCrossReference_3_0_0 = (CrossReference)cRaisesAssignment_3_0.eContents().get(0);
		private final RuleCall cRaisesEventQualifiedNameParserRuleCall_3_0_0_1 = (RuleCall)cRaisesEventCrossReference_3_0_0.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cExpressionANDParserRuleCall_4_0_0 = (RuleCall)cExpressionAssignment_4_0.eContents().get(0);
		private final Assignment cExpressionAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cExpressionORParserRuleCall_4_1_0 = (RuleCall)cExpressionAssignment_4_1.eContents().get(0);
		private final Assignment cExpressionAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cExpressionXORParserRuleCall_4_2_0 = (RuleCall)cExpressionAssignment_4_2.eContents().get(0);
		private final Assignment cExpressionAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final RuleCall cExpressionNOTParserRuleCall_4_3_0 = (RuleCall)cExpressionAssignment_4_3.eContents().get(0);
		private final Assignment cExpressionAssignment_4_4 = (Assignment)cAlternatives_4.eContents().get(4);
		private final RuleCall cExpressionPredicateListenParserRuleCall_4_4_0 = (RuleCall)cExpressionAssignment_4_4.eContents().get(0);
		private final Assignment cExpressionAssignment_4_5 = (Assignment)cAlternatives_4.eContents().get(5);
		private final RuleCall cExpressionRuleListenParserRuleCall_4_5_0 = (RuleCall)cExpressionAssignment_4_5.eContents().get(0);
		
		//RuleDeclaration Rule:
		//	'rule' name=ID? ':=' (raises=[logicBaseModel::Event|QualifiedName] '<-')? (expression=AND | expression=OR |
		//	expression=XOR | expression=NOT | expression=PredicateListen | expression=RuleListen);
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' name=ID? ':=' (raises=[logicBaseModel::Event|QualifiedName] '<-')? (expression=AND | expression=OR |
		//expression=XOR | expression=NOT | expression=PredicateListen | expression=RuleListen)
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }
		
		//(raises=[logicBaseModel::Event|QualifiedName] '<-')?
		public Group getGroup_3() { return cGroup_3; }
		
		//raises=[logicBaseModel::Event|QualifiedName]
		public Assignment getRaisesAssignment_3_0() { return cRaisesAssignment_3_0; }
		
		//[logicBaseModel::Event|QualifiedName]
		public CrossReference getRaisesEventCrossReference_3_0_0() { return cRaisesEventCrossReference_3_0_0; }
		
		//QualifiedName
		public RuleCall getRaisesEventQualifiedNameParserRuleCall_3_0_0_1() { return cRaisesEventQualifiedNameParserRuleCall_3_0_0_1; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_3_1() { return cLessThanSignHyphenMinusKeyword_3_1; }
		
		//expression=AND | expression=OR | expression=XOR | expression=NOT | expression=PredicateListen | expression=RuleListen
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//expression=AND
		public Assignment getExpressionAssignment_4_0() { return cExpressionAssignment_4_0; }
		
		//AND
		public RuleCall getExpressionANDParserRuleCall_4_0_0() { return cExpressionANDParserRuleCall_4_0_0; }
		
		//expression=OR
		public Assignment getExpressionAssignment_4_1() { return cExpressionAssignment_4_1; }
		
		//OR
		public RuleCall getExpressionORParserRuleCall_4_1_0() { return cExpressionORParserRuleCall_4_1_0; }
		
		//expression=XOR
		public Assignment getExpressionAssignment_4_2() { return cExpressionAssignment_4_2; }
		
		//XOR
		public RuleCall getExpressionXORParserRuleCall_4_2_0() { return cExpressionXORParserRuleCall_4_2_0; }
		
		//expression=NOT
		public Assignment getExpressionAssignment_4_3() { return cExpressionAssignment_4_3; }
		
		//NOT
		public RuleCall getExpressionNOTParserRuleCall_4_3_0() { return cExpressionNOTParserRuleCall_4_3_0; }
		
		//expression=PredicateListen
		public Assignment getExpressionAssignment_4_4() { return cExpressionAssignment_4_4; }
		
		//PredicateListen
		public RuleCall getExpressionPredicateListenParserRuleCall_4_4_0() { return cExpressionPredicateListenParserRuleCall_4_4_0; }
		
		//expression=RuleListen
		public Assignment getExpressionAssignment_4_5() { return cExpressionAssignment_4_5; }
		
		//RuleListen
		public RuleCall getExpressionRuleListenParserRuleCall_4_5_0() { return cExpressionRuleListenParserRuleCall_4_5_0; }
	}
	public class ANDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.AND");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cArgumentsANDParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cArgumentsORParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cArgumentsXORParserRuleCall_2_2_0 = (RuleCall)cArgumentsAssignment_2_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cArgumentsNOTParserRuleCall_2_3_0 = (RuleCall)cArgumentsAssignment_2_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cArgumentsPredicateListenParserRuleCall_2_4_0 = (RuleCall)cArgumentsAssignment_2_4.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_5 = (Assignment)cAlternatives_2.eContents().get(5);
		private final RuleCall cArgumentsRuleListenParserRuleCall_2_5_0 = (RuleCall)cArgumentsAssignment_2_5.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cArgumentsAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cArgumentsANDParserRuleCall_3_1_0_0 = (RuleCall)cArgumentsAssignment_3_1_0.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cArgumentsORParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_2 = (Assignment)cAlternatives_3_1.eContents().get(2);
		private final RuleCall cArgumentsXORParserRuleCall_3_1_2_0 = (RuleCall)cArgumentsAssignment_3_1_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_3 = (Assignment)cAlternatives_3_1.eContents().get(3);
		private final RuleCall cArgumentsNOTParserRuleCall_3_1_3_0 = (RuleCall)cArgumentsAssignment_3_1_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_4 = (Assignment)cAlternatives_3_1.eContents().get(4);
		private final RuleCall cArgumentsPredicateListenParserRuleCall_3_1_4_0 = (RuleCall)cArgumentsAssignment_3_1_4.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_5 = (Assignment)cAlternatives_3_1.eContents().get(5);
		private final RuleCall cArgumentsRuleListenParserRuleCall_3_1_5_0 = (RuleCall)cArgumentsAssignment_3_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AND:
		//	'and' '(' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen |
		//	arguments+=RuleListen) (',' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT |
		//	arguments+=PredicateListen | arguments+=RuleListen))* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'and' '(' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen |
		//arguments+=RuleListen) (',' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT |
		//arguments+=PredicateListen | arguments+=RuleListen))* ')'
		public Group getGroup() { return cGroup; }
		
		//'and'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen | arguments+=RuleListen
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//arguments+=AND
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }
		
		//AND
		public RuleCall getArgumentsANDParserRuleCall_2_0_0() { return cArgumentsANDParserRuleCall_2_0_0; }
		
		//arguments+=OR
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }
		
		//OR
		public RuleCall getArgumentsORParserRuleCall_2_1_0() { return cArgumentsORParserRuleCall_2_1_0; }
		
		//arguments+=XOR
		public Assignment getArgumentsAssignment_2_2() { return cArgumentsAssignment_2_2; }
		
		//XOR
		public RuleCall getArgumentsXORParserRuleCall_2_2_0() { return cArgumentsXORParserRuleCall_2_2_0; }
		
		//arguments+=NOT
		public Assignment getArgumentsAssignment_2_3() { return cArgumentsAssignment_2_3; }
		
		//NOT
		public RuleCall getArgumentsNOTParserRuleCall_2_3_0() { return cArgumentsNOTParserRuleCall_2_3_0; }
		
		//arguments+=PredicateListen
		public Assignment getArgumentsAssignment_2_4() { return cArgumentsAssignment_2_4; }
		
		//PredicateListen
		public RuleCall getArgumentsPredicateListenParserRuleCall_2_4_0() { return cArgumentsPredicateListenParserRuleCall_2_4_0; }
		
		//arguments+=RuleListen
		public Assignment getArgumentsAssignment_2_5() { return cArgumentsAssignment_2_5; }
		
		//RuleListen
		public RuleCall getArgumentsRuleListenParserRuleCall_2_5_0() { return cArgumentsRuleListenParserRuleCall_2_5_0; }
		
		//(',' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen |
		//arguments+=RuleListen))*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen | arguments+=RuleListen
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//arguments+=AND
		public Assignment getArgumentsAssignment_3_1_0() { return cArgumentsAssignment_3_1_0; }
		
		//AND
		public RuleCall getArgumentsANDParserRuleCall_3_1_0_0() { return cArgumentsANDParserRuleCall_3_1_0_0; }
		
		//arguments+=OR
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }
		
		//OR
		public RuleCall getArgumentsORParserRuleCall_3_1_1_0() { return cArgumentsORParserRuleCall_3_1_1_0; }
		
		//arguments+=XOR
		public Assignment getArgumentsAssignment_3_1_2() { return cArgumentsAssignment_3_1_2; }
		
		//XOR
		public RuleCall getArgumentsXORParserRuleCall_3_1_2_0() { return cArgumentsXORParserRuleCall_3_1_2_0; }
		
		//arguments+=NOT
		public Assignment getArgumentsAssignment_3_1_3() { return cArgumentsAssignment_3_1_3; }
		
		//NOT
		public RuleCall getArgumentsNOTParserRuleCall_3_1_3_0() { return cArgumentsNOTParserRuleCall_3_1_3_0; }
		
		//arguments+=PredicateListen
		public Assignment getArgumentsAssignment_3_1_4() { return cArgumentsAssignment_3_1_4; }
		
		//PredicateListen
		public RuleCall getArgumentsPredicateListenParserRuleCall_3_1_4_0() { return cArgumentsPredicateListenParserRuleCall_3_1_4_0; }
		
		//arguments+=RuleListen
		public Assignment getArgumentsAssignment_3_1_5() { return cArgumentsAssignment_3_1_5; }
		
		//RuleListen
		public RuleCall getArgumentsRuleListenParserRuleCall_3_1_5_0() { return cArgumentsRuleListenParserRuleCall_3_1_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.OR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cArgumentsANDParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cArgumentsORParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cArgumentsXORParserRuleCall_2_2_0 = (RuleCall)cArgumentsAssignment_2_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cArgumentsNOTParserRuleCall_2_3_0 = (RuleCall)cArgumentsAssignment_2_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cArgumentsPredicateListenParserRuleCall_2_4_0 = (RuleCall)cArgumentsAssignment_2_4.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_5 = (Assignment)cAlternatives_2.eContents().get(5);
		private final RuleCall cArgumentsRuleListenParserRuleCall_2_5_0 = (RuleCall)cArgumentsAssignment_2_5.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cArgumentsAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cArgumentsANDParserRuleCall_3_1_0_0 = (RuleCall)cArgumentsAssignment_3_1_0.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cArgumentsORParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_2 = (Assignment)cAlternatives_3_1.eContents().get(2);
		private final RuleCall cArgumentsXORParserRuleCall_3_1_2_0 = (RuleCall)cArgumentsAssignment_3_1_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_3 = (Assignment)cAlternatives_3_1.eContents().get(3);
		private final RuleCall cArgumentsNOTParserRuleCall_3_1_3_0 = (RuleCall)cArgumentsAssignment_3_1_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_4 = (Assignment)cAlternatives_3_1.eContents().get(4);
		private final RuleCall cArgumentsPredicateListenParserRuleCall_3_1_4_0 = (RuleCall)cArgumentsAssignment_3_1_4.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_5 = (Assignment)cAlternatives_3_1.eContents().get(5);
		private final RuleCall cArgumentsRuleListenParserRuleCall_3_1_5_0 = (RuleCall)cArgumentsAssignment_3_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OR:
		//	'or' '(' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen |
		//	arguments+=RuleListen) (',' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT |
		//	arguments+=PredicateListen | arguments+=RuleListen))* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'or' '(' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen |
		//arguments+=RuleListen) (',' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT |
		//arguments+=PredicateListen | arguments+=RuleListen))* ')'
		public Group getGroup() { return cGroup; }
		
		//'or'
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen | arguments+=RuleListen
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//arguments+=AND
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }
		
		//AND
		public RuleCall getArgumentsANDParserRuleCall_2_0_0() { return cArgumentsANDParserRuleCall_2_0_0; }
		
		//arguments+=OR
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }
		
		//OR
		public RuleCall getArgumentsORParserRuleCall_2_1_0() { return cArgumentsORParserRuleCall_2_1_0; }
		
		//arguments+=XOR
		public Assignment getArgumentsAssignment_2_2() { return cArgumentsAssignment_2_2; }
		
		//XOR
		public RuleCall getArgumentsXORParserRuleCall_2_2_0() { return cArgumentsXORParserRuleCall_2_2_0; }
		
		//arguments+=NOT
		public Assignment getArgumentsAssignment_2_3() { return cArgumentsAssignment_2_3; }
		
		//NOT
		public RuleCall getArgumentsNOTParserRuleCall_2_3_0() { return cArgumentsNOTParserRuleCall_2_3_0; }
		
		//arguments+=PredicateListen
		public Assignment getArgumentsAssignment_2_4() { return cArgumentsAssignment_2_4; }
		
		//PredicateListen
		public RuleCall getArgumentsPredicateListenParserRuleCall_2_4_0() { return cArgumentsPredicateListenParserRuleCall_2_4_0; }
		
		//arguments+=RuleListen
		public Assignment getArgumentsAssignment_2_5() { return cArgumentsAssignment_2_5; }
		
		//RuleListen
		public RuleCall getArgumentsRuleListenParserRuleCall_2_5_0() { return cArgumentsRuleListenParserRuleCall_2_5_0; }
		
		//(',' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen |
		//arguments+=RuleListen))*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen | arguments+=RuleListen
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//arguments+=AND
		public Assignment getArgumentsAssignment_3_1_0() { return cArgumentsAssignment_3_1_0; }
		
		//AND
		public RuleCall getArgumentsANDParserRuleCall_3_1_0_0() { return cArgumentsANDParserRuleCall_3_1_0_0; }
		
		//arguments+=OR
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }
		
		//OR
		public RuleCall getArgumentsORParserRuleCall_3_1_1_0() { return cArgumentsORParserRuleCall_3_1_1_0; }
		
		//arguments+=XOR
		public Assignment getArgumentsAssignment_3_1_2() { return cArgumentsAssignment_3_1_2; }
		
		//XOR
		public RuleCall getArgumentsXORParserRuleCall_3_1_2_0() { return cArgumentsXORParserRuleCall_3_1_2_0; }
		
		//arguments+=NOT
		public Assignment getArgumentsAssignment_3_1_3() { return cArgumentsAssignment_3_1_3; }
		
		//NOT
		public RuleCall getArgumentsNOTParserRuleCall_3_1_3_0() { return cArgumentsNOTParserRuleCall_3_1_3_0; }
		
		//arguments+=PredicateListen
		public Assignment getArgumentsAssignment_3_1_4() { return cArgumentsAssignment_3_1_4; }
		
		//PredicateListen
		public RuleCall getArgumentsPredicateListenParserRuleCall_3_1_4_0() { return cArgumentsPredicateListenParserRuleCall_3_1_4_0; }
		
		//arguments+=RuleListen
		public Assignment getArgumentsAssignment_3_1_5() { return cArgumentsAssignment_3_1_5; }
		
		//RuleListen
		public RuleCall getArgumentsRuleListenParserRuleCall_3_1_5_0() { return cArgumentsRuleListenParserRuleCall_3_1_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class XORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.XOR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cArgumentsANDParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cArgumentsORParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cArgumentsXORParserRuleCall_2_2_0 = (RuleCall)cArgumentsAssignment_2_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cArgumentsNOTParserRuleCall_2_3_0 = (RuleCall)cArgumentsAssignment_2_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cArgumentsPredicateListenParserRuleCall_2_4_0 = (RuleCall)cArgumentsAssignment_2_4.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_5 = (Assignment)cAlternatives_2.eContents().get(5);
		private final RuleCall cArgumentsRuleListenParserRuleCall_2_5_0 = (RuleCall)cArgumentsAssignment_2_5.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cArgumentsAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cArgumentsANDParserRuleCall_3_1_0_0 = (RuleCall)cArgumentsAssignment_3_1_0.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cArgumentsORParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_2 = (Assignment)cAlternatives_3_1.eContents().get(2);
		private final RuleCall cArgumentsXORParserRuleCall_3_1_2_0 = (RuleCall)cArgumentsAssignment_3_1_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_3 = (Assignment)cAlternatives_3_1.eContents().get(3);
		private final RuleCall cArgumentsNOTParserRuleCall_3_1_3_0 = (RuleCall)cArgumentsAssignment_3_1_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_4 = (Assignment)cAlternatives_3_1.eContents().get(4);
		private final RuleCall cArgumentsPredicateListenParserRuleCall_3_1_4_0 = (RuleCall)cArgumentsAssignment_3_1_4.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_5 = (Assignment)cAlternatives_3_1.eContents().get(5);
		private final RuleCall cArgumentsRuleListenParserRuleCall_3_1_5_0 = (RuleCall)cArgumentsAssignment_3_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//XOR:
		//	'xor' '(' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen |
		//	arguments+=RuleListen) (',' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT |
		//	arguments+=PredicateListen | arguments+=RuleListen))* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'xor' '(' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen |
		//arguments+=RuleListen) (',' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT |
		//arguments+=PredicateListen | arguments+=RuleListen))* ')'
		public Group getGroup() { return cGroup; }
		
		//'xor'
		public Keyword getXorKeyword_0() { return cXorKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen | arguments+=RuleListen
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//arguments+=AND
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }
		
		//AND
		public RuleCall getArgumentsANDParserRuleCall_2_0_0() { return cArgumentsANDParserRuleCall_2_0_0; }
		
		//arguments+=OR
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }
		
		//OR
		public RuleCall getArgumentsORParserRuleCall_2_1_0() { return cArgumentsORParserRuleCall_2_1_0; }
		
		//arguments+=XOR
		public Assignment getArgumentsAssignment_2_2() { return cArgumentsAssignment_2_2; }
		
		//XOR
		public RuleCall getArgumentsXORParserRuleCall_2_2_0() { return cArgumentsXORParserRuleCall_2_2_0; }
		
		//arguments+=NOT
		public Assignment getArgumentsAssignment_2_3() { return cArgumentsAssignment_2_3; }
		
		//NOT
		public RuleCall getArgumentsNOTParserRuleCall_2_3_0() { return cArgumentsNOTParserRuleCall_2_3_0; }
		
		//arguments+=PredicateListen
		public Assignment getArgumentsAssignment_2_4() { return cArgumentsAssignment_2_4; }
		
		//PredicateListen
		public RuleCall getArgumentsPredicateListenParserRuleCall_2_4_0() { return cArgumentsPredicateListenParserRuleCall_2_4_0; }
		
		//arguments+=RuleListen
		public Assignment getArgumentsAssignment_2_5() { return cArgumentsAssignment_2_5; }
		
		//RuleListen
		public RuleCall getArgumentsRuleListenParserRuleCall_2_5_0() { return cArgumentsRuleListenParserRuleCall_2_5_0; }
		
		//(',' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen |
		//arguments+=RuleListen))*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen | arguments+=RuleListen
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//arguments+=AND
		public Assignment getArgumentsAssignment_3_1_0() { return cArgumentsAssignment_3_1_0; }
		
		//AND
		public RuleCall getArgumentsANDParserRuleCall_3_1_0_0() { return cArgumentsANDParserRuleCall_3_1_0_0; }
		
		//arguments+=OR
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }
		
		//OR
		public RuleCall getArgumentsORParserRuleCall_3_1_1_0() { return cArgumentsORParserRuleCall_3_1_1_0; }
		
		//arguments+=XOR
		public Assignment getArgumentsAssignment_3_1_2() { return cArgumentsAssignment_3_1_2; }
		
		//XOR
		public RuleCall getArgumentsXORParserRuleCall_3_1_2_0() { return cArgumentsXORParserRuleCall_3_1_2_0; }
		
		//arguments+=NOT
		public Assignment getArgumentsAssignment_3_1_3() { return cArgumentsAssignment_3_1_3; }
		
		//NOT
		public RuleCall getArgumentsNOTParserRuleCall_3_1_3_0() { return cArgumentsNOTParserRuleCall_3_1_3_0; }
		
		//arguments+=PredicateListen
		public Assignment getArgumentsAssignment_3_1_4() { return cArgumentsAssignment_3_1_4; }
		
		//PredicateListen
		public RuleCall getArgumentsPredicateListenParserRuleCall_3_1_4_0() { return cArgumentsPredicateListenParserRuleCall_3_1_4_0; }
		
		//arguments+=RuleListen
		public Assignment getArgumentsAssignment_3_1_5() { return cArgumentsAssignment_3_1_5; }
		
		//RuleListen
		public RuleCall getArgumentsRuleListenParserRuleCall_3_1_5_0() { return cArgumentsRuleListenParserRuleCall_3_1_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class NOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.NOT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cArgumentAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cArgumentANDParserRuleCall_2_0_0 = (RuleCall)cArgumentAssignment_2_0.eContents().get(0);
		private final Assignment cArgumentAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cArgumentORParserRuleCall_2_1_0 = (RuleCall)cArgumentAssignment_2_1.eContents().get(0);
		private final Assignment cArgumentAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cArgumentXORParserRuleCall_2_2_0 = (RuleCall)cArgumentAssignment_2_2.eContents().get(0);
		private final Assignment cArgumentAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cArgumentNOTParserRuleCall_2_3_0 = (RuleCall)cArgumentAssignment_2_3.eContents().get(0);
		private final Assignment cArgumentAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cArgumentPredicateListenParserRuleCall_2_4_0 = (RuleCall)cArgumentAssignment_2_4.eContents().get(0);
		private final Assignment cArgumentAssignment_2_5 = (Assignment)cAlternatives_2.eContents().get(5);
		private final RuleCall cArgumentRuleListenParserRuleCall_2_5_0 = (RuleCall)cArgumentAssignment_2_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NOT:
		//	'not' '(' (argument=AND | argument=OR | argument=XOR | argument=NOT | argument=PredicateListen | argument=RuleListen)
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'not' '(' (argument=AND | argument=OR | argument=XOR | argument=NOT | argument=PredicateListen | argument=RuleListen)
		//')'
		public Group getGroup() { return cGroup; }
		
		//'not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//argument=AND | argument=OR | argument=XOR | argument=NOT | argument=PredicateListen | argument=RuleListen
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//argument=AND
		public Assignment getArgumentAssignment_2_0() { return cArgumentAssignment_2_0; }
		
		//AND
		public RuleCall getArgumentANDParserRuleCall_2_0_0() { return cArgumentANDParserRuleCall_2_0_0; }
		
		//argument=OR
		public Assignment getArgumentAssignment_2_1() { return cArgumentAssignment_2_1; }
		
		//OR
		public RuleCall getArgumentORParserRuleCall_2_1_0() { return cArgumentORParserRuleCall_2_1_0; }
		
		//argument=XOR
		public Assignment getArgumentAssignment_2_2() { return cArgumentAssignment_2_2; }
		
		//XOR
		public RuleCall getArgumentXORParserRuleCall_2_2_0() { return cArgumentXORParserRuleCall_2_2_0; }
		
		//argument=NOT
		public Assignment getArgumentAssignment_2_3() { return cArgumentAssignment_2_3; }
		
		//NOT
		public RuleCall getArgumentNOTParserRuleCall_2_3_0() { return cArgumentNOTParserRuleCall_2_3_0; }
		
		//argument=PredicateListen
		public Assignment getArgumentAssignment_2_4() { return cArgumentAssignment_2_4; }
		
		//PredicateListen
		public RuleCall getArgumentPredicateListenParserRuleCall_2_4_0() { return cArgumentPredicateListenParserRuleCall_2_4_0; }
		
		//argument=RuleListen
		public Assignment getArgumentAssignment_2_5() { return cArgumentAssignment_2_5; }
		
		//RuleListen
		public RuleCall getArgumentRuleListenParserRuleCall_2_5_0() { return cArgumentRuleListenParserRuleCall_2_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PredicateListenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.PredicateListen");
		private final Assignment cListensAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cListensPredicateParserRuleCall_0 = (RuleCall)cListensAssignment.eContents().get(0);
		
		//PredicateListen:
		//	listens=Predicate;
		@Override public ParserRule getRule() { return rule; }
		
		//listens=Predicate
		public Assignment getListensAssignment() { return cListensAssignment; }
		
		//Predicate
		public RuleCall getListensPredicateParserRuleCall_0() { return cListensPredicateParserRuleCall_0; }
	}
	public class RuleListenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage.RuleListen");
		private final Assignment cListensAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cListensRuleCrossReference_0 = (CrossReference)cListensAssignment.eContents().get(0);
		private final RuleCall cListensRuleIDTerminalRuleCall_0_1 = (RuleCall)cListensRuleCrossReference_0.eContents().get(1);
		
		//RuleListen:
		//	listens=[Rule];
		@Override public ParserRule getRule() { return rule; }
		
		//listens=[Rule]
		public Assignment getListensAssignment() { return cListensAssignment; }
		
		//[Rule]
		public CrossReference getListensRuleCrossReference_0() { return cListensRuleCrossReference_0; }
		
		//ID
		public RuleCall getListensRuleIDTerminalRuleCall_0_1() { return cListensRuleIDTerminalRuleCall_0_1; }
	}
	
	
	private final LogicFunctionDiagramElements pLogicFunctionDiagram;
	private final RuleDeclarationElements pRuleDeclaration;
	private final ANDElements pAND;
	private final ORElements pOR;
	private final XORElements pXOR;
	private final NOTElements pNOT;
	private final PredicateListenElements pPredicateListen;
	private final RuleListenElements pRuleListen;
	
	private final Grammar grammar;
	
	private final LogicBaseLanguageGrammarAccess gaLogicBaseLanguage;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LogicFunctionLanguageGrammarAccess(GrammarProvider grammarProvider,
			LogicBaseLanguageGrammarAccess gaLogicBaseLanguage,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaLogicBaseLanguage = gaLogicBaseLanguage;
		this.gaTerminals = gaTerminals;
		this.pLogicFunctionDiagram = new LogicFunctionDiagramElements();
		this.pRuleDeclaration = new RuleDeclarationElements();
		this.pAND = new ANDElements();
		this.pOR = new ORElements();
		this.pXOR = new XORElements();
		this.pNOT = new NOTElements();
		this.pPredicateListen = new PredicateListenElements();
		this.pRuleListen = new RuleListenElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.gamma.logical.logicFunction.language.LogicFunctionLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public LogicBaseLanguageGrammarAccess getLogicBaseLanguageGrammarAccess() {
		return gaLogicBaseLanguage;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LogicFunctionDiagram:
	//	'function'
	//	name=ID
	//	'{' (rule+=RuleDeclaration | interfaces+=Interface)*
	//	'}';
	public LogicFunctionDiagramElements getLogicFunctionDiagramAccess() {
		return pLogicFunctionDiagram;
	}
	
	public ParserRule getLogicFunctionDiagramRule() {
		return getLogicFunctionDiagramAccess().getRule();
	}
	
	//RuleDeclaration Rule:
	//	'rule' name=ID? ':=' (raises=[logicBaseModel::Event|QualifiedName] '<-')? (expression=AND | expression=OR |
	//	expression=XOR | expression=NOT | expression=PredicateListen | expression=RuleListen);
	public RuleDeclarationElements getRuleDeclarationAccess() {
		return pRuleDeclaration;
	}
	
	public ParserRule getRuleDeclarationRule() {
		return getRuleDeclarationAccess().getRule();
	}
	
	//AND:
	//	'and' '(' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen |
	//	arguments+=RuleListen) (',' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT |
	//	arguments+=PredicateListen | arguments+=RuleListen))* ')';
	public ANDElements getANDAccess() {
		return pAND;
	}
	
	public ParserRule getANDRule() {
		return getANDAccess().getRule();
	}
	
	//OR:
	//	'or' '(' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen |
	//	arguments+=RuleListen) (',' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT |
	//	arguments+=PredicateListen | arguments+=RuleListen))* ')';
	public ORElements getORAccess() {
		return pOR;
	}
	
	public ParserRule getORRule() {
		return getORAccess().getRule();
	}
	
	//XOR:
	//	'xor' '(' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT | arguments+=PredicateListen |
	//	arguments+=RuleListen) (',' (arguments+=AND | arguments+=OR | arguments+=XOR | arguments+=NOT |
	//	arguments+=PredicateListen | arguments+=RuleListen))* ')';
	public XORElements getXORAccess() {
		return pXOR;
	}
	
	public ParserRule getXORRule() {
		return getXORAccess().getRule();
	}
	
	//NOT:
	//	'not' '(' (argument=AND | argument=OR | argument=XOR | argument=NOT | argument=PredicateListen | argument=RuleListen)
	//	')';
	public NOTElements getNOTAccess() {
		return pNOT;
	}
	
	public ParserRule getNOTRule() {
		return getNOTAccess().getRule();
	}
	
	//PredicateListen:
	//	listens=Predicate;
	public PredicateListenElements getPredicateListenAccess() {
		return pPredicateListen;
	}
	
	public ParserRule getPredicateListenRule() {
		return getPredicateListenAccess().getRule();
	}
	
	//RuleListen:
	//	listens=[Rule];
	public RuleListenElements getRuleListenAccess() {
		return pRuleListen;
	}
	
	public ParserRule getRuleListenRule() {
		return getRuleListenAccess().getRule();
	}
	
	//Interface LogicInterfaceSpecification:
	//	'interface' name=ID '{'
	//	events+=EventDeclaration*
	//	'}';
	public LogicBaseLanguageGrammarAccess.InterfaceElements getInterfaceAccess() {
		return gaLogicBaseLanguage.getInterfaceAccess();
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}
	
	//EventDeclaration Event:
	//	direction=EventDirection extraValueType=ValueType? name=ID;
	public LogicBaseLanguageGrammarAccess.EventDeclarationElements getEventDeclarationAccess() {
		return gaLogicBaseLanguage.getEventDeclarationAccess();
	}
	
	public ParserRule getEventDeclarationRule() {
		return getEventDeclarationAccess().getRule();
	}
	
	//Predicate:
	//	'income' listens=[Event|QualifiedName];
	public LogicBaseLanguageGrammarAccess.PredicateElements getPredicateAccess() {
		return gaLogicBaseLanguage.getPredicateAccess();
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public LogicBaseLanguageGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaLogicBaseLanguage.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//enum EventDirection:
	//	IN='in' | OUT='out';
	public LogicBaseLanguageGrammarAccess.EventDirectionElements getEventDirectionAccess() {
		return gaLogicBaseLanguage.getEventDirectionAccess();
	}
	
	public EnumRule getEventDirectionRule() {
		return getEventDirectionAccess().getRule();
	}
	
	//enum ValueType:
	//	INTEGER='int';
	public LogicBaseLanguageGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaLogicBaseLanguage.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
