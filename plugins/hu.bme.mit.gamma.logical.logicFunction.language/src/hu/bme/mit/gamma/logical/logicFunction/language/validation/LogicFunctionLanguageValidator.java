/*
 * generated by Xtext 2.17.0
 */
package hu.bme.mit.gamma.logical.logicFunction.language.validation;

import org.eclipse.xtext.validation.Check;

import hu.bme.mit.gamma.logical.logicBase.model.EventDirection;
import hu.bme.mit.gamma.logical.logicBase.model.LogicalDiagram;
import hu.bme.mit.gamma.logical.logicFunction.model.LogicFunctionDiagram;
import hu.bme.mit.gamma.logical.logicFunction.model.ModelPackage;
import hu.bme.mit.gamma.logical.logicFunction.model.Rule;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class LogicFunctionLanguageValidator extends AbstractLogicFunctionLanguageValidator {
	@Check
	public void checkRuleNamesUnique(LogicFunctionDiagram diagram) {
		nameCollisionGeneralCheck(
				diagram.getRule(), 
				"The name is used by multiple rules.");
	}

	@Check
	public void checkOutEventRaised(Rule rule) {
		if(raisesNonOutEvent(rule)) {
			nonOutEventRaisedError(rule);
		}
	}
	
	/**
	 * @exception NullPointerException Iff rule is null.
	 */
	private void nonOutEventRaisedError(Rule rule) {
		if(rule == null) throw new NullPointerException();
		
		error(
				"The raised event should be out event.",
				rule,
				ModelPackage.Literals.RULE__RAISES);
	}

	/**
	 * @exception NullPointerException Iff rule is null.
	 */
	private boolean raisesNonOutEvent(Rule rule) {
		if(raisesAnyEvent(rule)) {
			return !EventDirection.OUT.equals(rule.getRaises().getDirection());
		}
		else {
			return false;
		}
	}
	
	/**
	 * @exception NullPointerException Iff rule is null.
	 */
	private boolean raisesAnyEvent(Rule rule) {
		return rule.getRaises() != null;
	}
	
}
