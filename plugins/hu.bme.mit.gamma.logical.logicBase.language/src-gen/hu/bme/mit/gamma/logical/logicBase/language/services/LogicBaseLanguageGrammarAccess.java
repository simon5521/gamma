/*
 * generated by Xtext 2.17.0
 */
package hu.bme.mit.gamma.logical.logicBase.language.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LogicBaseLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.logical.logicBase.language.LogicBaseLanguage.Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventsEventDeclarationParserRuleCall_3_0 = (RuleCall)cEventsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Interface LogicInterfaceSpecification:
		//	'interface' name=ID '{'
		//	events+=EventDeclaration*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'interface' name=ID '{' events+=EventDeclaration* '}'
		public Group getGroup() { return cGroup; }
		
		//'interface'
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//events+=EventDeclaration*
		public Assignment getEventsAssignment_3() { return cEventsAssignment_3; }
		
		//EventDeclaration
		public RuleCall getEventsEventDeclarationParserRuleCall_3_0() { return cEventsEventDeclarationParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EventDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.logical.logicBase.language.LogicBaseLanguage.EventDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionEventDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cExtraValueTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExtraValueTypeValueTypeEnumRuleCall_1_0 = (RuleCall)cExtraValueTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//EventDeclaration Event:
		//	direction=EventDirection extraValueType=ValueType? name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//direction=EventDirection extraValueType=ValueType? name=ID
		public Group getGroup() { return cGroup; }
		
		//direction=EventDirection
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//EventDirection
		public RuleCall getDirectionEventDirectionEnumRuleCall_0_0() { return cDirectionEventDirectionEnumRuleCall_0_0; }
		
		//extraValueType=ValueType?
		public Assignment getExtraValueTypeAssignment_1() { return cExtraValueTypeAssignment_1; }
		
		//ValueType
		public RuleCall getExtraValueTypeValueTypeEnumRuleCall_1_0() { return cExtraValueTypeValueTypeEnumRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.logical.logicBase.language.LogicBaseLanguage.Predicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncomeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListensAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cListensEventCrossReference_1_0 = (CrossReference)cListensAssignment_1.eContents().get(0);
		private final RuleCall cListensEventQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cListensEventCrossReference_1_0.eContents().get(1);
		
		//Predicate:
		//	'income' listens=[Event|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//'income' listens=[Event|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'income'
		public Keyword getIncomeKeyword_0() { return cIncomeKeyword_0; }
		
		//listens=[Event|QualifiedName]
		public Assignment getListensAssignment_1() { return cListensAssignment_1; }
		
		//[Event|QualifiedName]
		public CrossReference getListensEventCrossReference_1_0() { return cListensEventCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getListensEventQualifiedNameParserRuleCall_1_0_1() { return cListensEventQualifiedNameParserRuleCall_1_0_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.logical.logicBase.language.LogicBaseLanguage.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class EventDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.logical.logicBase.language.LogicBaseLanguage.EventDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINInKeyword_0_0 = (Keyword)cINEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTOutKeyword_1_0 = (Keyword)cOUTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EventDirection:
		//	IN='in' | OUT='out';
		public EnumRule getRule() { return rule; }
		
		//IN='in' | OUT='out'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IN='in'
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_0() { return cINEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getINInKeyword_0_0() { return cINInKeyword_0_0; }
		
		//OUT='out'
		public EnumLiteralDeclaration getOUTEnumLiteralDeclaration_1() { return cOUTEnumLiteralDeclaration_1; }
		
		//'out'
		public Keyword getOUTOutKeyword_1_0() { return cOUTOutKeyword_1_0; }
	}
	public class ValueTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.logical.logicBase.language.LogicBaseLanguage.ValueType");
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cINTEGERIntKeyword_0 = (Keyword)cINTEGEREnumLiteralDeclaration.eContents().get(0);
		
		//enum ValueType:
		//	INTEGER='int';
		public EnumRule getRule() { return rule; }
		
		//INTEGER='int'
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration() { return cINTEGEREnumLiteralDeclaration; }
		
		//'int'
		public Keyword getINTEGERIntKeyword_0() { return cINTEGERIntKeyword_0; }
	}
	
	private final InterfaceElements pInterface;
	private final EventDeclarationElements pEventDeclaration;
	private final PredicateElements pPredicate;
	private final QualifiedNameElements pQualifiedName;
	private final EventDirectionElements eEventDirection;
	private final ValueTypeElements eValueType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LogicBaseLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pInterface = new InterfaceElements();
		this.pEventDeclaration = new EventDeclarationElements();
		this.pPredicate = new PredicateElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.eEventDirection = new EventDirectionElements();
		this.eValueType = new ValueTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.gamma.logical.logicBase.language.LogicBaseLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Interface LogicInterfaceSpecification:
	//	'interface' name=ID '{'
	//	events+=EventDeclaration*
	//	'}';
	public InterfaceElements getInterfaceAccess() {
		return pInterface;
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}
	
	//EventDeclaration Event:
	//	direction=EventDirection extraValueType=ValueType? name=ID;
	public EventDeclarationElements getEventDeclarationAccess() {
		return pEventDeclaration;
	}
	
	public ParserRule getEventDeclarationRule() {
		return getEventDeclarationAccess().getRule();
	}
	
	//Predicate:
	//	'income' listens=[Event|QualifiedName];
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//enum EventDirection:
	//	IN='in' | OUT='out';
	public EventDirectionElements getEventDirectionAccess() {
		return eEventDirection;
	}
	
	public EnumRule getEventDirectionRule() {
		return getEventDirectionAccess().getRule();
	}
	
	//enum ValueType:
	//	INTEGER='int';
	public ValueTypeElements getValueTypeAccess() {
		return eValueType;
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
