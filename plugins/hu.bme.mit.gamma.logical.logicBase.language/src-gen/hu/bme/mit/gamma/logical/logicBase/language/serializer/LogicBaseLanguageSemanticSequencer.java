/*
 * generated by Xtext 2.17.0
 */
package hu.bme.mit.gamma.logical.logicBase.language.serializer;

import com.google.inject.Inject;
import hu.bme.mit.gamma.logical.logicBase.language.services.LogicBaseLanguageGrammarAccess;
import hu.bme.mit.gamma.logical.logicBase.model.Event;
import hu.bme.mit.gamma.logical.logicBase.model.LogicInterfaceSpecification;
import hu.bme.mit.gamma.logical.logicBase.model.ModelPackage;
import hu.bme.mit.gamma.logical.logicBase.model.Predicate;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class LogicBaseLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LogicBaseLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ModelPackage.EVENT:
				sequence_EventDeclaration(context, (Event) semanticObject); 
				return; 
			case ModelPackage.LOGIC_INTERFACE_SPECIFICATION:
				sequence_Interface(context, (LogicInterfaceSpecification) semanticObject); 
				return; 
			case ModelPackage.PREDICATE:
				sequence_Predicate(context, (Predicate) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     EventDeclaration returns Event
	 *
	 * Constraint:
	 *     (direction=EventDirection extraValueType=ValueType? name=ID)
	 */
	protected void sequence_EventDeclaration(ISerializationContext context, Event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Interface returns LogicInterfaceSpecification
	 *
	 * Constraint:
	 *     (name=ID events+=EventDeclaration*)
	 */
	protected void sequence_Interface(ISerializationContext context, LogicInterfaceSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Predicate returns Predicate
	 *
	 * Constraint:
	 *     listens=[Event|QualifiedName]
	 */
	protected void sequence_Predicate(ISerializationContext context, Predicate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.PREDICATE__LISTENS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.PREDICATE__LISTENS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPredicateAccess().getListensEventQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(ModelPackage.Literals.PREDICATE__LISTENS, false));
		feeder.finish();
	}
	
	
}
