/**
 * generated by Xtext 2.17.0
 */
package hu.bme.mit.gamma.logical.logicBase.language.formatting2;

import com.google.inject.Inject;
import hu.bme.mit.gamma.logical.logicBase.language.services.LogicBaseLanguageGrammarAccess;
import hu.bme.mit.gamma.logical.logicBase.model.Event;
import hu.bme.mit.gamma.logical.logicBase.model.LogicInterfaceSpecification;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class LogicBaseLanguageFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private LogicBaseLanguageGrammarAccess _logicBaseLanguageGrammarAccess;
  
  protected void _format(final LogicInterfaceSpecification logicInterfaceSpecification, @Extension final IFormattableDocument document) {
    EList<Event> _events = logicInterfaceSpecification.getEvents();
    for (final Event event : _events) {
      document.<Event>format(event);
    }
  }
  
  public void format(final Object logicInterfaceSpecification, final IFormattableDocument document) {
    if (logicInterfaceSpecification instanceof XtextResource) {
      _format((XtextResource)logicInterfaceSpecification, document);
      return;
    } else if (logicInterfaceSpecification instanceof LogicInterfaceSpecification) {
      _format((LogicInterfaceSpecification)logicInterfaceSpecification, document);
      return;
    } else if (logicInterfaceSpecification instanceof EObject) {
      _format((EObject)logicInterfaceSpecification, document);
      return;
    } else if (logicInterfaceSpecification == null) {
      _format((Void)null, document);
      return;
    } else if (logicInterfaceSpecification != null) {
      _format(logicInterfaceSpecification, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(logicInterfaceSpecification, document).toString());
    }
  }
}
